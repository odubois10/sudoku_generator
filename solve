class Solve:
    """
    Takes a matrix and tests if there is a valid sudoku solution
    """

    def full_grid(self, puzzle):
        """
        Check that the puzzle has been completely filled out
        :param puzzle: puzzle to be validated
        :return: Boolean signifying validity
        """
        for row in range(0, 9):
            for col in range(0, 9):
                if not puzzle[row, col]:
                    return False

    def check_clue(self, puzzle):
        """
        Uses backtracking method to check every possible element in each index
        until a valid solution for the whole matrix is found
        :param puzzle: unique puzzle with only 26 elements in the matrix 
        (in need of 81 total)
        :return: boolean signifying if there is a valid solution
        """


        # Find next empty cell
        for row in range(9):
            # iterates through matrix row
            for col in range(9):
                # iterates through matrix column
                if puzzle[row, col] == 0:
                    for element in range(1, 10):
                        # Check that this value has not already been used on
                        # this row
                        if element not in puzzle[row]:
                            # Check that this value has not already been used on
                            # this column
                            if element not in puzzle[:, col]:
                                # Identify which of the 9 squares we are working
                                # on
                                square = []
                                if row < 3:
                                    if col < 3:
                                        square[:2] = puzzle[:3, :3]
                                    elif col < 6:
                                        square[:2] = puzzle[:3, 3:6]
                                    else:
                                        square[:2] = puzzle[:3, 6:9]
                                elif row < 6:
                                    if col < 3:
                                        square[:2] = puzzle[3:6, :3]
                                    elif col < 6:
                                        square[:2] = puzzle[3:6, 3:6]
                                    else:
                                        square[:2] = puzzle[3:6, 6:9]
                                else:
                                    if col < 3:
                                        square[:2] = puzzle[6:9, 0:3]
                                    elif col < 6:
                                        square[:2] = puzzle[6:9, 3:6]
                                    else:
                                        square[:2] = puzzle[6:9, 6:9]
                                # Check that this value has not already been
                                # used on this 3x3 square
                                if element not in square[0]:
                                    if element not in square[1]:
                                        if element not in square[2]:
                                            puzzle[row, col] = element
                                            if self.full_grid(puzzle):
                                                return puzzle
                                            elif self.check_clue(puzzle):
                                                return puzzle
                                            else:
                                                return False

